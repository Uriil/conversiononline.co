<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Centimeter" xml:space="preserve">
    <value>Centimeter</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="ContactEmail" xml:space="preserve">
    <value>Send e-mail to info@conversiononline.co. I reply to all e-mail I receive.</value>
  </data>
  <data name="Contacts" xml:space="preserve">
    <value>CONTACT ME</value>
  </data>
  <data name="ContactsBody" xml:space="preserve">
    <value>Thank you for visiting conversiononline.co. If you have any comments, suggestions, requests, bug reports, or just want to say hello, feel free to contact me.</value>
  </data>
  <data name="ContactsTitle" xml:space="preserve">
    <value>Contact Information</value>
  </data>
  <data name="CurrentlyAvailableBody" xml:space="preserve">
    <value>I am going to add all types of conversion here. But now here is what we have now</value>
  </data>
  <data name="CurrentlyAvailableTitle" xml:space="preserve">
    <value>Currently available</value>
  </data>
  <data name="Day" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="Feet" xml:space="preserve">
    <value>Feet</value>
  </data>
  <data name="From" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="Hello" xml:space="preserve">
    <value>HELLO</value>
  </data>
  <data name="HomePageBody" xml:space="preserve">
    <value>I am created this site for educatinal purposes. If you have any ideas or recomendation how i can improve it please fill free to email.</value>
  </data>
  <data name="HomePageDescription" xml:space="preserve">
    <value>Free online units converter</value>
  </data>
  <data name="HomePageKeywords" xml:space="preserve">
    <value>online,conversion</value>
  </data>
  <data name="HomePageTitle" xml:space="preserve">
    <value>Conversion Online - Home</value>
  </data>
  <data name="Hour" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="Inch" xml:space="preserve">
    <value>Inch</value>
  </data>
  <data name="Kilometer" xml:space="preserve">
    <value>Kilometer</value>
  </data>
  <data name="League" xml:space="preserve">
    <value>League</value>
  </data>
  <data name="LeagueNautical" xml:space="preserve">
    <value>League[nautical]</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="LengthBody" xml:space="preserve">
    <value>&lt;p&gt;In geometric measurements, &lt;strong&gt;length&lt;/strong&gt; is the longest dimension of an object. In other contexts "length" is the measured dimension of an object. For example it is possible to cut a length of a wire which is shorter than wire thickness.&lt;/p&gt;
&lt;p&gt;Length may be distinguished from height, which is vertical extent, and width or breadth, which are the distance from side to side, measuring across the object at right angles to the length. Length is a measure of one dimension, whereas area is a measure of two dimensions (length squared) and volume is a measure of three dimensions (length cubed). In most systems of measurement, the unit of length is a fundamental unit, from which other units are defined.&lt;/p&gt;</value>
  </data>
  <data name="LengthTitle" xml:space="preserve">
    <value>Lenght conversion</value>
  </data>
  <data name="Meter" xml:space="preserve">
    <value>Meter</value>
  </data>
  <data name="Microinch" xml:space="preserve">
    <value>Microinch</value>
  </data>
  <data name="Mile" xml:space="preserve">
    <value>Mile</value>
  </data>
  <data name="Millimeter" xml:space="preserve">
    <value>Millimeter</value>
  </data>
  <data name="Minute" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="Month" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="ResultText" xml:space="preserve">
    <value>Result will be here</value>
  </data>
  <data name="Second" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="To" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="UnixTimeBody" xml:space="preserve">
    <value>&lt;p&gt;Use this page to convert from readable date/time to unixtime and vise versa.&lt;/p&gt; &lt;p&gt;Unix time is a single signed integer number which increments every second, without requiring the calculations to determine year, month, day of month, hour and minute required for intelligibility to humans. Modern Unix time is based on UTC, which counts time using SI seconds, and breaks up the span of time into days almost always 86 400 s long, but due to leap seconds occasionally 86 401 s this keeps the days synchronized with the rotation of the Earth as per Universal Time. The Unix epoch is the time 00:00:00 UTC on 1 January 1970 (or 1970-01-01T00:00:00Z ISO 8601).&lt;/p&gt;</value>
  </data>
  <data name="UnixtimePageDescription" xml:space="preserve">
    <value>Convert unixtime to readable date/time</value>
  </data>
  <data name="UnixtimePageKeywords" xml:space="preserve">
    <value>unixtime,conversion,online,timestamp</value>
  </data>
  <data name="UnixTimeTitle" xml:space="preserve">
    <value>UnixTime Conversion</value>
  </data>
  <data name="UpcomingServices" xml:space="preserve">
    <value>Upcoming services</value>
  </data>
  <data name="Weight" xml:space="preserve">
    <value>Weight</value>
  </data>
  <data name="Yard" xml:space="preserve">
    <value>Yard</value>
  </data>
  <data name="Year" xml:space="preserve">
    <value>Year</value>
  </data>
</root>